cat /proc/device-tree/model  => 라즈베리파이 보드 모델명과 버전 확인
uname -a  => 일반적인 버전정보
cat /etc/issue  => OS 버전에 대한 정보
cat /etc/raspbian-release  => OS 버전에 대한 정보2
getconf LONG_BIT  => OS bit 확인하기 

pip install pymssql 에러! 
ERROR: Could not build wheels for pymssql which use PEP 517 and cannot be installed directly

I'm trying to connect to SQL Server from Raspberry Pi 3. I've already tried everything that google search suggested and still can't manage to install pymssql using pip3.
 --> sudo apt-get install libssl-dev

If you want to install it for 3.8.2 and getting this error. You can try installing 2.2.7 version of pymssql
 --> pip install pymssql==2.2.7


you're missing some header (and likely library) files needed to build the extension.
Unless you want to build from scratch, it'll probably be easier to get the suitable prebuilt wheel from Dave Gohlke's Windows wheels page and install it with Pip. Be sure to choose the correct file for your Python version and bitness.



python -m pip install -U pip wheel setuptools
--> 하고 나니까 에러 이름이 바뀜!
--> Could not build wheels for pymssql, which is required to install pyproject.toml-based projects

pip --no-cache-dir install pymssql
--> 안됨
--> Could not build wheels for pymssql, which is required to install pyproject.toml-based projects


I was facing the same issue and my error was not installing the correct pymysql
The documentation (https://pymysql.readthedocs.io/en/latest/user/installation.html) says that you should install
>>> python3 -m pip install PyMySQL
This worked for me
--> 뭐지 이거 뭔가 설치됐음! -근데 안됨;

미니콘다 깔아서 가상환경 구축해서 해보자.. 안됨! OS가 32비트라서 그런듯
일단 OS를 64비트로 바꾼 뒤에 다시 시도해보자 .... ㅠㅠ
https://github.com/conda-forge/miniforge/issues/440

You need to download Miniconda3-py39_4.9.2-Linux-aarch64.sh.
sudo wget http://repo.continuum.io/miniconda/Miniconda3-py39_4.9.2-Linux-aarch64.sh
sudo /bin/bash Miniconda3-py39_4.9.2-Linux-aarch64.sh
Do not upgrade!!!! => 이사람 말대로 py39_4.9.2 버전 까니까 미니콘다 설치됨!!
근데 미니콘다에서 파이썬 파일이 안열림 => illegal instruction
https://blog.naver.com/hermian71/222984055070 <= Python 프로그램 실행 중 illegal instruction을 만났을 때에 대한 글인데, 읽어봐도 무슨 소린지 모르겠음 

Well, you could install the missing libraries, or you could just install the slightly old standard packaged version
sudo apt update
sudo apt -y install python3-pymssql
=> 오? dpkg -l | pymssql 하니까 설치된걸로 뜨는데?? 
-------------------------------------------------------------------------------------------------
https://www.it-admins.com/raspberry-pi-and-microsoft-sql-databases/ 이 아저씨가 같은 문제로 파이썬 3.x에서 pymssql이 import가 안되는데 파이썬 버전 2.x에서 하니까 된대요. 그래서 파이썬 2.x 환경에서 해보려고 하는중입니다. chat gpt야 도와줘

가상 환경 생성: 새로운 가상 환경을 생성합니다.

bash
Copy code
python -m venv myenv
가상 환경 활성화: 생성한 가상 환경을 활성화합니다.

bash
Copy code
source myenv/bin/activate

pyenv 설치:
먼저, pyenv를 설치해야 합니다. 아래 명령어를 터미널에서 실행하여 설치합니다.

bash
Copy code
curl https://pyenv.run | bash
환경 변수 설정:
pyenv를 설치한 후에는 해당 도구의 경로를 PATH 환경 변수에 추가해야 합니다. 아래와 같이 명령어를 실행하여 환경 변수를 설정합니다.

bash
Copy code
echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(pyenv init -)"' >> ~/.bashrc
echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc
source ~/.bashrc
pyenv로 원하는 파이썬 버전 설치:
이제 pyenv 명령어를 사용하여 원하는 버전의 파이썬을 설치할 수 있습니다. 아래 명령어를 사용하여 파이썬 3.8.12 버전을 설치하고 활성화합니다.

bash
Copy code
pyenv install 3.8.12
pyenv global 3.8.12
이제 pyenv로 설치한 파이썬 버전이 시스템에서 활성화되었습니다. 이제 해당 버전의 파이썬을 사용하여 가상 환경을 생성하고 필요한 패키지를 설치할 수 있습니다.


가상 환경 생성:
Python 2.7.18을 기반으로하는 가상 환경을 생성합니다.
bash
Copy code
pyenv virtualenv 2.7.18 myenv2
가상 환경 활성화:
생성한 가상 환경을 활성화합니다.
bash
Copy code
pyenv activate myenv2
이제 myenv2라는 가상 환경이 활성화되었습니다. 해당 가상 환경에서는 Python 2.7.18 버전이 사용될 것입니다.

가상 환경 비활성화:
가상 환경을 더 이상 사용하지 않을 때는 다음 명령으로 비활성화할 수 있습니다.
bash
Copy code
pyenv deactivate




pyenv를 사용하여 생성된 가상 환경 목록을 확인하고 제거하는 방법은 다음과 같습니다:

생성된 가상 환경 목록 확인:
다음 명령으로 현재 시스템에 생성된 가상 환경 목록을 확인할 수 있습니다.
bash
Copy code
pyenv virtualenvs
가상 환경 제거:
원하는 가상 환경을 제거하려면 다음 명령을 사용합니다. 여기서 <env_name>을 삭제하려는 가상 환경의 이름으로 바꾸세요.
bash
Copy code
pyenv uninstall <env_name>
위의 단계를 따라가면 생성된 가상 환경 목록을 확인하고 필요한 가상 환경을 제거할 수 있습니다.






venv 모듈 명령어 가르쳐줘
ChatGPT
물론이죠! venv 모듈을 사용하여 가상 환경을 만들고 관리할 수 있습니다. 아래는 venv 모듈을 사용한 가상 환경 생성 및 활성화 방법입니다.

가상 환경 생성:

bash
Copy code
python -m venv myenv
위 명령을 실행하면 현재 디렉토리에 myenv라는 이름의 가상 환경이 생성됩니다.

가상 환경 활성화:

Windows:

bash
Copy code
myenv\Scripts\activate
macOS 및 Linux:

bash
Copy code
source myenv/bin/activate
위 명령을 실행하면 가상 환경이 활성화되고, 쉘 프롬프트에 가상 환경 이름이 나타납니다.

가상 환경 비활성화:

bash
Copy code
deactivate
활성화된 가상 환경을 비활성화하고 기본 시스템 Python 환경으로 돌아갑니다.

이렇게 생성한 가상 환경에서는 pip을 사용하여 필요한 라이브러리를 설치하고 사용할 수 있습니다. 필요한 라이브러리를 설치한 후에는 가상 환경을 활성화한 상태에서 해당 라이브러리를 사용할 수 있습니다.




User
venv 모듈을 이용해서 smart라는 가상 환경을 만들었어. 파이썬 2.7.18 버전을 쓰고 싶어서 설치도 했고, python2.7 --version 이라고 치면 Python 2.7.18이라고도 잘 나와 이제 어떻게 해
ChatGPT
가상 환경을 생성하고 파이썬 2.7.18을 설치한 후에는 해당 가상 환경을 활성화하여 사용하면 됩니다. 아래는 순서대로 수행해야 할 작업들입니다.

가상 환경을 활성화합니다:

bash
Copy code
source smart/bin/activate
이 명령을 실행하면 가상 환경이 활성화됩니다. 쉘 프롬프트 앞에 (smart)가 나타나게 될 것입니다.

Python 2.7.18을 사용하도록 가상 환경에 설치합니다:

가상 환경을 활성화한 상태에서 아래 명령을 실행합니다:

bash
Copy code
pyenv install 2.7.18
이 명령을 실행하여 파이썬 2.7.18을 가상 환경에 설치합니다.

가상 환경에 설치한 파이썬 2.7.18을 사용합니다:

bash
Copy code
pyenv local 2.7.18
이 명령을 실행하여 가상 환경에 설치한 파이썬 버전을 사용하도록 설정합니다.

Python 2.7.18 버전이 제대로 설치되었는지 확인합니다:

bash
Copy code
python --version
위 명령을 실행하면 Python 2.7.18 버전이 제대로 나와야 합니다.

이제 가상 환경을 활성화하고 Python 2.7.18을 사용하여 코드를 실행하면 됩니다. 필요한 라이브러리도 가상 환경 내에서 설치하고 사용하시면 됩니다.




User
(smart) pi@pi:~ $ pyenv local 2.7.18
bash: pyenv: command not found
bash: pyenv: command not found
bash: pyenv: command not found
ChatGPT
pyenv 명령이 찾아지지 않는 문제는 pyenv가 시스템에 설치되지 않았거나, 해당 명령을 찾을 수 없는 환경 변수 설정 문제가 있을 수 있습니다.

pyenv를 사용하기 위해서는 다음과 같은 단계를 따라서 진행해보세요:

pyenv 설치:

pyenv를 설치해야 합니다. pyenv는 Python 버전 관리를 가능하게 하는 도구입니다. 아래 명령을 사용하여 pyenv를 설치하세요.

bash
Copy code
curl https://pyenv.run | bash
위 명령을 실행하면 pyenv가 설치됩니다.

pyenv 초기화:

pyenv를 사용하려면 환경 변수를 설정해야 합니다. 아래 명령을 사용하여 pyenv 초기화 스크립트를 프로파일 파일 (예: ~/.bashrc, ~/.zshrc)에 추가하세요.

bash
Copy code
echo 'export PATH="$HOME/.pyenv/bin:$PATH"' >> ~/.bashrc
echo 'eval "$(pyenv init -)"' >> ~/.bashrc
echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bashrc
source ~/.bashrc
프로파일 파일을 수정하였다면, 터미널을 재시작하거나 아래 명령으로 프로파일 파일을 다시 읽어오세요:

bash
Copy code
source ~/.bashrc
pyenv를 이용하여 Python 2.7.18 설치 및 사용:

이제 pyenv를 사용하여 Python 2.7.18을 설치하고 사용할 수 있습니다. 가상 환경을 생성하고 Python 2.7.18을 설치한 후 아래 명령으로 사용할 수 있습니다.

bash
Copy code
pyenv virtualenv 2.7.18 smart
pyenv activate smart
위 명령을 실행하면 (smart)가 쉘 프롬프트 앞에 표시되며, 가상 환경이 활성화됩니다.

pyenv 명령 사용:

이제 가상 환경 내에서 pyenv 명령을 사용할 수 있어야 합니다. pyenv local 2.7.18과 같은 명령을 사용하여 원하는 Python 버전을 사용하도록 설정할 수 있습니다.

코드 실행:

이제 가상 환경 내에서 Python 2.7.18을 사용하여 코드를 실행할 수 있습니다.

위 단계를 따라하면 pyenv를 사용하여 Python 버전을 관리하고 가상 환경을 생성하여 원하는 버전의 Python을 사용할 수 있을 것입니다.




User
pyenv를 smart 가상환경에서 설치해주는게 좋을까?
ChatGPT
일반적으로 pyenv는 시스템 전역에서 Python 버전을 관리하기 위한 목적으로 사용됩니다. 가상 환경 내에서 pyenv를 설치하는 것은 불필요한 복잡성을 초래할 수 있으며, 가상 환경 내에서 이미 Python 버전을 관리하고 있기 때문에 굳이 pyenv를 가상 환경에 설치할 필요가 없습니다.

가상 환경 내에서 Python 버전을 관리하고 싶다면, 이미 생성한 가상 환경 smart를 활성화한 후 해당 가상 환경 내에서 필요한 Python 버전을 설치하고 사용하는 것이 좋습니다. 가상 환경 내에서는 pyenv를 별도로 설치할 필요가 없이 python2.7 명령을 통해 Python 2.7.18을 사용할 수 있습니다.

따라서, 가상 환경 smart를 활성화한 상태에서 Python 2.7.18을 설치하고 사용하시는 것이 가장 간단하고 권장되는 방법입니다.




User
가상환경 빠져나가는 방법
ChatGPT
가상 환경에서 빠져나오려면 다음 명령을 사용하면 됩니다:

Copy code
deactivate
위 명령을 실행하면 현재 활성화된 가상 환경에서 빠져나와 기본 시스템의 Python 환경으로 돌아옵니다.


pyenv virtualenvs

-----------------------------------------------------------------------------------------------------------------------------------
https://nate9389.tistory.com/2155

https://m.blog.naver.com/heennavi1004/222119362920

=>> 이거 두개 참고해서 하니까 바로 해결 됨 ! 뭐지
----------------------------------------------------------------------------------------------------------------------------------
그냥 gpt한테 전체 에러를 보여주는 게 편한거같다.. 괜히 해결해볼려다가 시간만 날려먹은 기분이다 
해당 에러는 pymssql 라이브러리를 빌드하는 과정에서 필요한 의존성 라이브러리가 시스템에 설치되지 않아 발생한 것입니다. 특히 lgssapi_krb5와 lkrb5 라이브러리가 필요한데, 현재 시스템에 설치되지 않아서 빌드 과정이 실패하고 있습니다.

이 문제를 해결하기 위해서는 해당 의존성 라이브러리를 시스템에 설치해야 합니다. 에러 메시지에서 보이는 두 라이브러리는 주로 Kerberos 라이브러리와 관련된 것으로 보이므로, 다음과 같은 방법을 시도해볼 수 있습니다:

1. Kerberos 라이브러리 설치: Kerberos 라이브러리를 설치해보세요. 에러 메시지에서 참조하는 lgssapi_krb5와 lkrb5는 Kerberos 라이브러리와 관련된 라이브러리입니다.

bash
Copy code
# Debian/Ubuntu 계열
sudo apt-get install libkrb5-dev

# CentOS/RHEL 계열
sudo yum install krb5-devel
설치 후 다시 pymssql를 설치해보세요.


해당 에러는 pymssql 라이브러리를 빌드하는 과정에서 필요한 의존성 라이브러리가 시스템에 설치되지 않아 발생한 것입니다. 특히 lgssapi_krb5와 lkrb5 라이브러리가 필요한데, 현재 시스템에 설치되지 않아서 빌드 과정이 실패하고 있습니다.

이 문제를 해결하기 위해서는 해당 의존성 라이브러리를 시스템에 설치해야 합니다. 에러 메시지에서 보이는 두 라이브러리는 주로 Kerberos 라이브러리와 관련된 것으로 보이므로, 다음과 같은 방법을 시도해볼 수 있습니다:

Kerberos 라이브러리 설치: Kerberos 라이브러리를 설치해보세요. 에러 메시지에서 참조하는 lgssapi_krb5와 lkrb5는 Kerberos 라이브러리와 관련된 라이브러리입니다.

bash
Copy code
# Debian/Ubuntu 계열
sudo apt-get install libkrb5-dev

# CentOS/RHEL 계열
sudo yum install krb5-devel
설치 후 다시 pymssql를 설치해보세요.

2. FreeTDS 설치: pymssql는 FreeTDS 라이브러리에 의존하는 경우도 있습니다. FreeTDS가 설치되어 있는지 확인하고, 없다면 설치해보세요.

bash
Copy code
# Debian/Ubuntu 계열
sudo apt-get install freetds-dev

# CentOS/RHEL 계열
sudo yum install freetds-devel
설치 후 다시 pymssql를 설치해보세요.

위의 방법 중 하나를 시도해서 pymssql 설치 시에 필요한 의존성 라이브러리를 설치한 뒤에 다시 시도해보세요.





